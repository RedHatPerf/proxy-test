# Gather facts about agents
- hosts:
  - driver-agent
  - proxy
  - backend
  tasks: []
- hosts: 127.0.0.1
  connection: local
  tasks:
  - name: Get agents
    tags: [ 'noperf']
    uri:
      url: "http://{{ groups['driver-master'][0] }}:{{ hyperfoil_controller_port }}/agents"
      return_content: true
      status_code: "200"
    register: agents_json
  - name: Filter agents
    tags: [ 'noperf' ]
    set_fact:
      agents: "{{ agents_json.content | from_json | json_query('[].name') }}"
  - name: Apply benchmark template
    tags: [ 'noperf' ]
    template:
      src: 'benchmarks/{{ test_name }}.yaml.j2'
      dest: '/tmp/{{ test_name }}.yaml'
  - name: Upload benchmark template
    tags: [ 'noperf' ]
    uri:
      src: '/tmp/{{ test_name }}.yaml'
      method: POST
      headers:
        Content-Type: "text/vnd.yaml; charset=UTF-8"
      url: "http://{{ groups['driver-master'][0] }}:{{ hyperfoil_controller_port }}/benchmark"
      status_code: "204"

- hosts: proxy
  tasks:
  - name: Get temporary dir for recording
    tempfile:
      state: directory
    register: perf_dir_remote
  - name: Start Perf recording
    become: true
    become_user: root
    shell: sleep {{ test_rampup_duration }} && perf record -a -g -F 99 -o {{ perf_dir_remote.path }}/perf.data
    async: 100000
    poll: 0

- hosts: 127.0.0.1
  connection: local
  tasks:
  - name: Start benchmark
    tags: [ 'noperf' ]
    uri:
      url: "http://{{ groups['driver-master'][0] }}:{{ hyperfoil_controller_port }}/benchmark/{{ test_name }}/start"
      status_code: 202
    register: test_run
  - tags: [ 'noperf' ]
    set_fact:
      test_runid: "{{ test_run.location | urlsplit('path') | basename }}"
  - tags: [ 'noperf' ]
    debug:
      msg: "Benchmark URI: {{ test_run.location }} -> {{ test_runid }}"
  - name: Poll benchmark completion
    tags: [ 'noperf' ]
    uri:
      url: "{{ test_run.location }}"
      return_content: true
    register: test_status
    # Ansible 2.7 does not support include_tasks in do-until loop so we need to inline the condition
    # See https://github.com/ansible/ansible/issues/46203 for details
    until: test_status.content | from_json | json_query('terminated')
#      (test_status.content | from_json | json_query('phases[*].status') | reject('match', 'TERMINATED') | list | length) == 0
#      and
#      (test_status.content | from_json | json_query('phases[*].status') | length) != 0
    delay: 5
    retries: 100000
  - name: Prepare local workdir
    tempfile:
      state: directory
    register: perf_dir_local

- hosts: proxy
  tasks:
  - name: Stop Perf recording
    become: true
    become_user: root
    shell: pkill -f "perf record"
  # We need to call perf script as root in order to get kernel.kallsyms debug info correctly
  - name: Resolve symbols
    become: true
    become_user: root
    shell: >
      perf script -f -F comm,pid,tid,cpu,time,event,ip,sym,dso,trace
      --kallsyms=/proc/kallsyms -i {{ perf_dir_remote.path }}/perf.data
      > {{ perf_dir_remote.path }}/perf.stacks
    register: perf_script
  - name: Perf data size
    become: true
    become_user: root
    shell: stat --printf="%s" {{ perf_dir_remote.path }}/perf.data
    register: perf_data_size
  - name: Test perf data
    debug:
      msg: perf.data has {{ perf_data_size.stdout }} bytes
    failed_when: perf_data_size.stdout == 0
  - name: Move perf recording
    fetch:
      src: "{{ perf_dir_remote.path }}/perf.stacks"
      dest: "{{ perf_dir_local.path }}/"
      flat: true
  - name: Delete remote recording
    file:
      path: "{{ perf_dir_remote.path }}"
      state: absent

- hosts: 127.0.0.1
  connection: local
  tasks:
  - get_url:
      url: https://raw.githubusercontent.com/brendangregg/FlameGraph/master/stackcollapse-perf.pl
      dest: /tmp/stackcollapse-perf.pl
  - get_url:
      url: https://raw.githubusercontent.com/brendangregg/FlameGraph/master/flamegraph.pl
      dest: /tmp/flamegraph.pl
  - file:
      path: "{{ item }}"
      mode: 0755
    with_items:
    - /tmp/stackcollapse-perf.pl
    - /tmp/flamegraph.pl
  - name: "Create stacktraces"
    shell: "/tmp/stackcollapse-perf.pl --pid {{ perf_dir_local.path }}/perf.stacks > {{ perf_dir_local.path }}/perf.inline"
  - name: "Create flamegraph"
    shell: /tmp/flamegraph.pl --colors=java --width=1850 {{ perf_dir_local.path }}/perf.inline > {{ test_result_dir }}/{{ test_runid }}-{{ proxy_impl or 'none' }}.svg
  - debug:
      msg: "Flamegraph: {{ test_result_dir }}/{{ test_runid }}-{{ proxy_impl or 'none' }}.svg"
  - name: "Delete temp dirs"
    file:
      path: "{{ perf_dir_local.path }}"
      state: absent